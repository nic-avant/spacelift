services:
  postgresql:
    container_name: temporal-postgresql
    image: postgres:13
    environment:
      POSTGRES_USER: temporal
      POSTGRES_PASSWORD: temporal
    ports:
      - 5433:5432  # External port is 5433, internal remains 5432
    networks:
      - temporal-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U temporal"]
      interval: 5s
      timeout: 5s
      retries: 5
 
  temporal:
    container_name: temporal
    image: temporalio/auto-setup:1.20.0
    depends_on:
      postgresql:
        condition: service_healthy
    environment:
      - DB=postgresql
      - DB_PORT=5432      # Internal PostgreSQL port
      - POSTGRES_USER=temporal
      - POSTGRES_PWD=temporal
      - POSTGRES_SEEDS=postgresql
      - ENABLE_ES=false
      - AUTO_SETUP=true
      - SKIP_SCHEMA_SETUP=false
    ports:
      - 7233:7233
    networks:
      - temporal-network
 
  temporal-ui:
    container_name: temporal-ui
    image: temporalio/ui:2.21.3
    depends_on:
      - temporal
    environment:
      - TEMPORAL_ADDRESS=temporal:7233
      - TEMPORAL_CORS_ORIGINS=http://localhost:8088
    ports:
      - 8088:8088
    networks:
      - temporal-network

  spacelift-api:
    container_name: spacelift-api
    build: 
      context: .
      dockerfile: Dockerfile
    ports:
      - 8000:8000
    networks:
      - temporal-network
    depends_on:
      - temporal
    environment:
      - TEMPORAL_ADDRESS=${TEMPORAL_ADDRESS:-temporal:7233}
      - SPACELIFT_BASE_URL=${SPACELIFT_BASE_URL}
      - SPACELIFT_KEY_ID=${SPACELIFT_KEY_ID}
      - SPACELIFT_KEY_SECRET=${SPACELIFT_KEY_SECRET}
      - API_HOST=${API_HOST:-0.0.0.0}
      - API_PORT=${API_PORT:-8000}

networks:
  temporal-network:
    driver: bridge
    name: temporal-network